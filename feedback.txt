GUI vs CLI

Graphical
User
Interface

Command
Line
Interface

#Cmd
cd 폴더명\폴더명
- 상대경로 / 폴더명으로 이동 

cd /
- 루트 디렉토리로 이동

cd ..
- 이전 폴더로 이동

cd c:\Users\User\폴더명
- 절대경로 / 폴더명으로 이동

mkdir 폴더명
- 폴더 생성

rmdir 폴더명
- 폴더 제거

echo 내용 > 파일명.유형
- 내용을 가진 파일 생성

del 파일명.유형
- 파일 제거

#git(파일 및 변경사항을 추적하는 작업을 수행)

Working Directory 
- Current project folder

Repository
- All tracked files and folders

Commit
- Code snapshot

Branch
- Where commits are stored

git init
- Repository 초기화

git status
- 현 git 프로젝트 정보를 확인할 수 있고(commit), 우리가 어디 Branch에 위치한지도 확인할 수 있다.(on Branch)

git add .(추적해야할 파일명/.의 경우 전부를 일컬음)
- 어떤 파일을 추적해야하는지 어떤 것이 다음 코드 스냅샷의 일부가 될 수 있는지 알려줘야 함.
- 추적되는 파일은 staging구역(파일들이 모여있는 곳)에 추가된다.

git commit -m "파일의 변경사항"
- snapshot

git config --global --edit
- name / email 개인자격정보를 나타내는데 이것으로 편집하는 것은 아니다.
- 나갈 떄는 Esc & :x

git config --global user.name/user.email
- name/email 확인

git config --global user.name/user.email "변경할 이름"
- name/email 변경

git log
- Branch 안에 있는 모든 commit의 개요를 확인할 수 있음.

git branch
- branch들 나열 / * 초록색이 현재 있는 branch

git branch -m 이름(""없음)
- 현재 있는 branch 이름 변경

git checkout 이름 / git checkout -b 이름
- branch간 바꿀 때 / 새로운 branch 생성할 때 

git merge 이름
- 현재 branch에 다른 branch를 병합할 때 
- 충돌이 있는 경우 새로운 것을 받아들이거나 지금을 유지하는 경우가 있는데 그렇게 수정을 한 이후 새로 commit을 생성한다

head -> 가장 최근 branch

git log의 경우 q를 누르면 나온다.

cls
- clear

delete
- 그냥 마우스로 파일 삭제한 후 commit
- git rm 파일명 (이 경우 자동으로 commit됨)
ㄴ 삭제하기 위해서는 정확한 경로로 이동 / 경로 이동의 경우는 cd를 이용한다

git reset --hard HEAD~숫자
- 헤드는 숫자만큼 commit 뒤로 간다

git branch -D 브렌치이름
- branch 삭제